# read49.txt

 - 설정파일 분리
 	context-main.xml : scan, property
 	context-datasource : datasource, mybatis
 	context-aspect : aop
 	context-transaction
 	
 - AOP 개념
 	Core Concern : (핵심관심사) 실제 해야 할 업무 로직
 	Crosscutting Concern : (횡단관심사) 시스템적으로 필요한 기능 (로깅, 보안, 트랜잭션 등)
 	
 - Proxy객체 구현 : 해당 객체가 인터페이스를 구현했으면, 프록시도 해당 인터페이스를 구현
 					일반 객체이면 상속을 통해서 구현
 					일반 객체가 final인 경우 AOP가 적용 안 될 수 있다
 
 - Advice 구현시 첫번째 인자는 JoinPoint 사용
 	JoinPoint.getTarget() : 대상객체(원본)
 	 		 .getClass().getSimpleName(); 	클래스명
 	 		 .getSignature().getName();		메서드명
 	 		 .getAgs()	-> Object[] 이 리턴됨
 	단, Around JoinPoint인 경우
 		내부에서 원본을 호출해야 하기 때문에 ProceedingJoinPoint 제공
 		추가된 메서드
 		.proceed()	: 원본 호출, 결과는 Object로 리턴
 		
 	execution 표기법
 	
 	execution([접근제어자] * [패키지, 클래스] * (..)
 					선택 필수 		선택	필수 옵션	
 		리턴타입 필수 : 일반적으로 * 사용
 		메서드명 필수 : *, insert*, get* 사용 가능
 		파라미터에서 ".."은 모드 아규먼트를 뜻함
 
 - transaction에서
 		rollback의 대상은 RuntimeException이 발생했을 때.
 		Biz
 		
 					 
 - File upload/download
 - MyBatis의 resultMap 사용
 	table 1:1	- association 관계
 		  1:N	- collection 관계
 