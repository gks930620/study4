# read46.txt

com.di.step1
		BoardDaoOracle
		BoardService -> BoardDaoOracle
		TestBoardService
		
		-- Dao 변경 발생
		BoardDaoMySql
		BoardService -> BoardDaoMySql : 인터페이스 IBoardDao
		
		Dao의 변경 발생시
		사용하는 서비스가 30개 있다면, 30개 모두를 변경해야 함
		
com.di.step2
		BoardDaoOracle , BoardDaoMySql
		BoardService -> BoardDaoMySql : 인터페이스 IBoardDao
		TestBoardService

com.di.step3
		Spring XML기반 설정 허용
		BoardDaoOracle , BoardDaoMySql
		BoardService -> BoardDaoMySql : 인터페이스 IBoardDao
		TestBoardService

com.di.step4
		Spring XML기반 설정은 최소로 + Annotation(@) 설정
		BoardDaoOracle , BoardDaoMySql
		BoardService -> BoardDaoMySql : 인터페이스 IBoardDao
		TestBoardService
		
     
----------------------------
IoC/DI  제어의 역전
IoC : 컨트롤러영역 - 비즈니스로직 영역 - 퍼시스턴스영역
문제점 : 만약, 퍼시스턴스 변경(FreeBoardDaoOracle -> FreeBoardDaoCubrid)
         비즈니스로직영역이 변경이 필요 (new FreeBoardDaoOracle() 수정) 
         
         도메인객체(모델, VO)를 제외하고 다른 객체는 기능성메서드(함수)만 
         필요하니, 매번 객체를 생성해야 하나?. 한개만 필요
         매번 객체를 만들때 디자인 패턴의 싱글턴 패턴으로 생성할까?
 
 객체생성 및 관리를 개발자(해당 객체에서)가 했어요  
 객체관리를 컨테이너의 설정파일에서 하도록 변경 

  A a = new A(); // 개발자가 직접 생성 

---- 
Spring DI 설정하는 방법 3가지 
  - 1. XML 로 설정
  - 2. 최소의 xml 설정(Component Scan) + 어노테이션    
  - 3. Java 설정      
  - 4. Java 설정(Component Scan) + 어노테이션      

--  빈등록 관련 어노테이션 
    @Component , (@Controller, @Service, @Repository)
    @Bean (JSR) - 특히 Java 설정에서 빈등록 사용
 
-- Inject과 관련한 어노테이션 
 @Autowire : 타입기반, 필드, 세터, 생성자  
 @Resource : JSR-250에서 injection지원을 위한 어노테이션
             이름기반으로 동작 , 만약 이름이 없다면 해당 필드, 메서드의 이름으로 유추한다. 
             한 개만 주입 가능. 만약 해당 메서드에 2개이상이 경우에는 @Autowired 또는 @Inject 를 사용       
             method(A a, B b) 안 됨
 @Inject : JSR 330 DI 표준으로 
           - @Autowire 동급 필드, 세터, 생성자
           
 @Value : 일반적인 값, 시스텝의 설정값을 셑팅 하는 용도  
 
 @Autowire : 자동 엮기. 필수. 해당 빈이 존재해야 함
  - 만약 없다면 에러 발생. 적절한 빈을 등록해야 함. / 또는, 진짜 null일 수도 있다면 (required=false)설정
  - 만약 2개 이상이라면 (boardDaoMySql,boardDaoOracle 둘 다 @Component 건 상태)
  			: @Qulifier (제한자, 한정자). 빈 등록시, 주입시 모두 사용 가능

- 이름기반/타입기반 이 뭔가요?
 @Autowire : IBoardDao 타입의 빈을 주입 
 @Resource : mydao 라는 이름의 빈을 주입
   
 public IBoardDao mydao;
 
 @Autowire 타입기반이라 IBoardDao 구현체가 2개이상 존재할때 오류발생
 이런 문제를 해결하려면 @Qualifier("daoOracle") 같이 사용 
  